{
	"info": {
		"_postman_id": "e1761bfa-3e1e-4448-8595-c4c70a65c12d",
		"name": "LogsCollection",
		"description": "This is a collection for testing pattaya web service api\n",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/logs?userId={{userId}}",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5d87f03d-1e59-4ccb-bc0f-8e570c05e3c1",
						"exec": [
							"var jsonData = pm.response.json();",
							"var firstLog = jsonData.logs[0];",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Test that all types are correct\", function () {",
							"",
							"  pm.expect(jsonData).to.be.an(\"object\");",
							"  pm.expect(jsonData.numberOfLogs).to.be.a(\"number\");",
							"  pm.expect(jsonData.pageNumber).to.be.a(\"number\");",
							"  pm.expect(jsonData.logsPerPage).to.be.a(\"number\");",
							"  pm.expect(jsonData.logs).to.be.an(\"array\");",
							"  ",
							"  ",
							"  ",
							"  pm.expect(firstLog.message).to.be.a(\"string\");",
							"  pm.expect(firstLog.adminId).to.be.a(\"string\");",
							"  pm.expect(firstLog.adminUser).to.be.a(\"string\");",
							"  pm.expect(firstLog.object).to.be.an(\"object\");",
							"  pm.expect(firstLog.object.userId).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.action).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.formId).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.idCard).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.postCode).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.name).to.be.a(\"string\");",
							"  pm.expect(firstLog.object.surname).to.be.a(\"string\");",
							"  pm.expect(firstLog.timestamp).to.be.a(\"string\");  ",
							"  ",
							"});",
							"",
							"",
							"pm.test(\"Logs per page must be the same of the logs array length\", () => {",
							"    pm.expect(jsonData.logs.length).to.eql(jsonData.logsPerPage);",
							"}) ",
							"",
							"pm.test(\"If There is a userId, the logs must contain only that userId\", () => {",
							"    if (data['userId']) {",
							"        pm.expect(firstLog.object.userId).to.eql(data['userId']); ",
							"    }",
							"})",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/logs?userId={{userId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"logs"
					],
					"query": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "add  user /user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "36957422-5720-44af-9f49-1f87e1cfe3c8",
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Body is correct\", function () {",
							"    pm.response.to.have.body(`${data[\"userId\"]} user added`);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"message\": {{message}},\n    \"adminId\": {{adminId}},\n    \"adminUser\": {{adminUser}},\n    \n    \n    \"object\" : {\n        \"action\": {{action}},\n        \"userId\": {{userId}},\n        \"formId\": {{formId}},\n        \"name\": {{name}},\n        \"surname\": {{surname}},\n        \"idCard\": {{idCard}},\n        \"postCode\": {{postCode}}\n\n    },\n    \"timestamp\": {{timestamp}}\n\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:8080/api/v1/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c941e914-cead-487f-b901-14f831724808",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(`${data[\"userId\"]} user deleted`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "update data",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "35834f88-9394-4ad1-a304-0027fdcfcdae",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(`${data[\"userId\"]} user updated`);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/api/v1/user",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"api",
						"v1",
						"user"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}